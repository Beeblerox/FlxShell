{"name":"root","path":"","read":true,"execute":true,"write":true,"children":[{"name":"bin","path":"/bin","read":true,"execute":true,"write":true,"children":[{"name":"grep","path":"/bin/grep","read":true,"execute":true,"write":true,"content":""},{"name":"mv","path":"/bin/mv","read":true,"execute":true,"write":true,"content":""},{"name":"rmdir","path":"/bin/rmdir","read":true,"execute":true,"write":true,"content":""},{"name":"help","path":"/bin/help","read":true,"execute":true,"write":true,"content":"import flxsys.Folder;\r\nimport hxclap.subarg.CmdArgBool;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\nbin = new CmdArgBool(\r\n        \"b\",\r\n        \"bin\",\r\n        \"Outputs a list of available commands\",\r\n        (E_CmdArgSyntax.isOPT) //Flag is set to optional\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"help\", [bin]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return status;\r\n}\r\n\r\nif (help._v == true)\r\n{\r\n    return cmdline.getUsageString();\r\n}\r\n\r\nif (bin._v == true)\r\n{\r\n    ret = \"\";\r\n    \r\n    for (x in Shell.drive.readFolder(\"/bin\").children)\r\n    {\r\n        ret += x.name + \"\\n\";\r\n    }\r\n    \r\n    return ret.substr(0, ret.length - 1);\r\n}\r\n\r\nreturn \"Try 'help -help' to see a list of options.\";"},{"name":"mkdir","path":"/bin/mkdir","read":true,"execute":true,"write":true,"content":""},{"name":"cd","path":"/bin/cd","read":true,"execute":true,"write":true,"content":"if (Args.length < 1)\r\n{\r\n    return \"cd usage: cd <directory path, relative or absolute (starting with '/')>\";\r\n}\r\n\r\nif (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n{\r\n    return \"cd usage: cd <directory path, relative or absolute (starting with '/')>\";\r\n}\r\n\r\nShell.curDir = Shell.drive.readFolder(Args[0], Shell.curDir.path);\r\nreturn null;"},{"name":"ls","path":"/bin/ls","read":true,"execute":true,"write":true,"content":"if (piped)\r\n{\r\n    return Shell.curDir.children;\r\n}\r\n\r\nelse\r\n{\r\n    ret = \"\";\r\n\r\n    for (x in Shell.curDir.children)\r\n    {\r\n        if (x.isDirectory)\r\n        {\r\n            ret += \"[\" + x.name + \"]\" + \"\\n\";\r\n        }\r\n        else\r\n        {\r\n            ret += x.name + \"\\n\";\r\n        }\r\n    }\r\n    \r\n    return ret.substr(0, ret.length - 1);\r\n}"},{"name":"more","path":"/bin/more","read":true,"execute":true,"write":true,"content":""},{"name":"cp","path":"/bin/cp","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdArgStrList(\r\n        \"s\",\r\n        \"source\",\r\n        \"File path (relative or absolute)\",\r\n        \"Files to be copied\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\ns._delimiters = \",\";\r\n\r\nd = new CmdArgStrList(\r\n        \"d\",\r\n        \"destination\",\r\n        \"File path (relative or absolute)\",\r\n        \"Copy destination\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd._delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"cp\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return status;\r\n}\r\n\r\nr = \"\";\r\ni = 0;\r\nwhile (i < s._list.length)\r\n{\r\n    //r += s._list[i] + d._list[i] + '\\n';\r\n    f = Shell.drive.readItem(s._list[i], Shell.curDir.path);\r\n    f.copy(d._list[i], Shell);\r\n    i++;\r\n}\r\n\r\nreturn r;"},{"name":"find","path":"/bin/find","read":true,"execute":true,"write":true,"content":""},{"name":"pwd","path":"/bin/pwd","read":true,"execute":true,"write":true,"content":""}]},{"name":"home","path":"/home","read":true,"execute":true,"write":true,"children":[]}]}