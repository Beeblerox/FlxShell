{"name":"root","path":"","read":true,"execute":true,"write":true,"children":[{"name":"bin","path":"/bin","read":true,"execute":true,"write":true,"children":[{"name":"mv","path":"/bin/mv","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdArgStrList(\r\n        \"s\",\r\n        \"source\",\r\n        \"Path (relative or absolute)\",\r\n        \"Files/Directories to be moved\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\ns._delimiters = \",\";\r\n\r\nd = new CmdArgStrList(\r\n        \"d\",\r\n        \"destination\",\r\n        \"Path (relative or absolute)\",\r\n        \"New parent directories' paths\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd._delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"mv\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < s._list.length)\r\n{\r\n    f = Shell.drive.readItem(s._list[i], Shell.curDir.path);\r\n    parent = Shell.drive.readFolder(d._list[i], Shell.curDir.path);\r\n    f.parent.children.remove(f.name);\r\n    parent.addChild(f);\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"cat","path":"/bin/cat","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\n\r\ns = new CmdArgStr(\r\n        \"s\",\r\n        \"source\",\r\n        \"File path (relative or absolute)\",\r\n        \"Source file to read\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        \"\"\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"cat\", [s]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nf = Shell.curDir;\r\nif (StringTools.trim(s._v).length < 1)\r\n{\r\n    f = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    f = Shell.drive.readFile(s._v, Shell.curDir.path);\r\n}\r\n\r\nreturn [f.content, \"\", \"\"];"},{"name":"cd","path":"/bin/cd","read":true,"execute":true,"write":true,"content":"usage = [\"cd usage: cd <directory path, relative or absolute (starting with '/')>\", \"\", \"\"];\r\n\r\nif (Args.length < 1)\r\n{\r\n    return usage;\r\n}\r\n\r\nif (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n{\r\n    return usage;\r\n}\r\n\r\nShell.curDir = Shell.drive.readFolder(Args[0], Shell.curDir.path);\r\nreturn [null, \"\", \"\"];"},{"name":"ls","path":"/bin/ls","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Directory path (relative or absolute)\",\r\n        \"Destination\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"ls\", [d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d._v).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d._v, Shell.curDir.path);\r\n}\r\n\r\nreturn [dir.children, \"name\", \"isDirectory\"];"},{"name":"touch","path":"/bin/touch","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.subarg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.File;\r\nimport StringTools;\r\n\r\nn = new CmdArgStrList(\r\n        \"n\",\r\n        \"names\",\r\n        \"New file name\",\r\n        \"New file names\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nn._delimiters = \",\";\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Directory path (relative or absolute)\",\r\n        \"Destination\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"touch\", [n, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d._v).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d._v, Shell.curDir.path);\r\n}\r\n\r\ni = 0;\r\nwhile (i < n._list.length)\r\n{\r\n    dir.addChild(new File(\"\", n._list[i]));\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"grep","path":"/bin/grep","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\nimport hxclap.subarg.CmdArgStrList;\r\nimport EReg;\r\n\r\ns = new CmdArgStrList(\r\n        \"s\",\r\n        \"source\",\r\n        \"Path (relative or absolute)\",\r\n        \"Files to search within\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\ns._delimiters = \",\";\r\n\r\nf = new CmdArgStr(\r\n        \"f\",\r\n        \"find\",\r\n        \"Regex\",\r\n        \"Search for lines matching this regex (NOT WORKING AT THE MOMENT)\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        \".\"\r\n        );\r\n\r\nw = new CmdArgStr(\r\n        \"w\",\r\n        \"word\",\r\n        \"String\",\r\n        \"Search for lines containing this string\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        \"\"\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"find\", [w, s]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nret = [];\r\n//ereg = new EReg(f._v, \"m\");\r\nword_search = w._v;\r\n\r\nfunction findMatches(arr, regex, file)\r\n{\r\n    if (regex.match(file.content))\r\n    {\r\n        //resstring = regex.matched(0);\r\n        \r\n        //if (resstring != null)\r\n            //arr.push(resstring);\r\n    }\r\n};\r\n\r\nfunction findMatchesWord(arr, w, file)\r\n{\r\n    res = file.content.indexOf(w);\r\n    \r\n    if (res > -1)\r\n    {\r\n        interm = file.content.substrng(res, file.content.length);\r\n        arr.push(file.content.substring(res, interm.indexOf(\"/n\")));\r\n    }\r\n};\r\n\r\ni = 0;\r\nwhile (i < s._list.length)\r\n{\r\n    f = Shell.drive.readFile(s._list[i], Shell.curDir.path);\r\n    findMatchesWord(ret, word_search, f);\r\n    i++;\r\n}\r\n\r\nreturn [ret, \"\", \"\"];"},{"name":"rename","path":"/bin/rename","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdArgStrList(\r\n        \"s\",\r\n        \"source\",\r\n        \"Path (relative or absolute)\",\r\n        \"Files/Directories to be renamed\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\ns._delimiters = \",\";\r\n\r\nd = new CmdArgStrList(\r\n        \"n\",\r\n        \"newnames\",\r\n        \"Name (string)\",\r\n        \"New names to be assigned\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd._delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"rename\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < s._list.length)\r\n{\r\n    f = Shell.drive.readItem(s._list[i], Shell.curDir.path);\r\n    f.rename(d._list[i]);\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"rmdir","path":"/bin/rmdir","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\n\r\np = new CmdArgStrList(\r\n        \"p\",\r\n        \"paths\",\r\n        \"Path (relative or absolute)\",\r\n        \"Paths to folders to delete\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\np._delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"rmdir\", [p]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < p._list.length)\r\n{\r\n    folder = Shell.drive.readFolder(p._list[i], Shell.curDir.path);\r\n    folder.delete();\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"echo","path":"/bin/echo","read":true,"execute":true,"write":true,"content":"usage = [\"echo usage: [filepath < echo] or [command | echo]\", \"\", \"\"];\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    return usage;\r\n}\r\n\r\nif (Args.length > 0)\r\n{\r\n    if (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n    {\r\n        return usage;\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    ret = fileInput.content;\r\n}\r\nelse\r\n{\r\n    ret = input[0];\r\n}\r\n\r\nreturn [ret, \"\", \"\"];"},{"name":"help","path":"/bin/help","read":true,"execute":true,"write":true,"content":"import flxsys.Folder;\r\nimport hxclap.subarg.CmdArgBool;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\nbin = new CmdArgBool(\r\n        \"b\",\r\n        \"bin\",\r\n        \"Outputs a list of available commands\",\r\n        (E_CmdArgSyntax.isOPT) //Flag is set to optional\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"help\", [bin]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (bin._v == true)\r\n{\r\n    arr = [];\r\n    \r\n    for (x in Shell.drive.readFolder(\"/bin\").children)\r\n    {\r\n        if (!x.isDirectory)\r\n        {\r\n            arr.push(x);\r\n        }\r\n    }\r\n    \r\n    return [arr, \"name\", \"\"];\r\n}\r\n\r\nreturn [\"Try 'help -help' to see a list of options. You can use the '-h'/'-help' arguments for any command to obtain its usage info.\", \"\", \"\"];"},{"name":"mkdir","path":"/bin/mkdir","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.subarg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\n\r\nn = new CmdArgStrList(\r\n        \"n\",\r\n        \"names\",\r\n        \"New folder name\",\r\n        \"New folder names\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nn._delimiters = \",\";\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Directory path (relative or absolute)\",\r\n        \"Destinations\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"mkdir\", [n, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d._v).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d._v, Shell.curDir.path);\r\n}\r\n\r\ni = 0;\r\nwhile (i < n._list.length)\r\n{\r\n    dir.addChild(new Folder([], n._list[i]));\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"clip","path":"/bin/clip","read":true,"execute":true,"write":true,"content":"import flash.system.System;\r\nimport flxsys.File;\r\nimport Std;\r\n\r\nusage = [\"clip usage: [filepath < clip] or [command | clip]\", \"\", \"\"];\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    return usage;\r\n}\r\n\r\nif (Args.length > 0)\r\n{\r\n    if (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n    {\r\n        return usage;\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    ret = fileInput.content;\r\n}\r\nelse\r\n{\r\n    if (Std.is(input[0], File))\r\n    {\r\n        ret = input[0].content;\r\n    }\r\n    else\r\n    {\r\n        ret = input[0];\r\n    }\r\n}\r\n\r\nSystem.setClipboard(ret);\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"edit","path":"/bin/edit","read":true,"execute":true,"write":true,"content":"return [\"In constructions.\", \"\", \"\"];"},{"name":"cp","path":"/bin/cp","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdArgStrList(\r\n        \"s\",\r\n        \"source\",\r\n        \"File path (relative or absolute)\",\r\n        \"Files to be copied\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\ns._delimiters = \",\";\r\n\r\nd = new CmdArgStrList(\r\n        \"d\",\r\n        \"destination\",\r\n        \"File path (relative or absolute)\",\r\n        \"Copy destinations\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd._delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"cp\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < s._list.length)\r\n{\r\n    f = Shell.drive.readItem(s._list[i], Shell.curDir.path);\r\n    f.copy(d._list[i], Shell);\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"find","path":"/bin/find","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Path (relative or absolute)\",\r\n        \"Directory from which to start the search\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\nn = new CmdArgStr(\r\n        \"n\",\r\n        \"name\",\r\n        \"Name of file/folder\",\r\n        \"Searches for file/folder\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"find\", [d, n]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d._v).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d._v, Shell.curDir.path);\r\n}\r\n\r\nfunction searchItem(arr, item, name)\r\n{\r\n    if (item.isDirectory)\r\n    {\r\n        searchFolder(arr, item, name);\r\n    }\r\n    else\r\n    {\r\n        searchFile(arr, item, name);\r\n    }\r\n};\r\n\r\nfunction searchFile(arr, item, name)\r\n{\r\n    if (item.name.indexOf(name) > -1)\r\n    {\r\n        arr.push(item);\r\n    }\r\n};\r\n\r\nfunction searchFolder(arr, item, name)\r\n{\r\n    if (item.name.indexOf(name) > -1)\r\n    {\r\n        arr.push(item);\r\n    }\r\n    \r\n    for (c in item.children)\r\n    {\r\n        searchItem(arr, c, name);\r\n    }\r\n};\r\n\r\nresults = [];\r\nsearchFolder(results, dir, n._v);\r\n\r\nreturn [results, \"name\", \"isDirectory\"];\r\n"},{"name":"pwd","path":"/bin/pwd","read":true,"execute":true,"write":true,"content":"usage = [\"pwd usage: pwd returns the shell's current working directory which can be modified by the cd command\", \"\", \"\"];\r\n\r\nif (Args.length > 0)\r\n{\r\n    return usage;\r\n}\r\n\r\nreturn [Shell.curDir.path, \"\", \"\"];"},{"name":"rm","path":"/bin/rm","read":true,"execute":true,"write":true,"content":"import hxclap.subarg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.File;\r\nimport StringTools;\r\n\r\np = new CmdArgStrList(\r\n        \"p\",\r\n        \"paths\",\r\n        \"Path (relative or absolute)\",\r\n        \"Paths to files to delete\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\np._delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"rm\", [p]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < p._list.length)\r\n{\r\n    file = Shell.drive.readFile(p._list[i], Shell.curDir.path);\r\n    file.delete();\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"}]},{"name":"home","path":"/home","read":true,"execute":true,"write":true,"children":[]}]}